version: '3.8'

services:
  rabbitmq:
    image: rabbitmq:management-alpine
    container_name: rabbitmq
    ports:
      - "5672:5672"    # AMQP port for services
      - "15672:15672"  # Management UI
    volumes:
      - ./data/rabbitmq:/var/lib/rabbitmq/
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    env_file:
      - ./.env
    networks:
      - github-trending-nw

  postgres:
    image: postgres:17.6-alpine
    container_name: postgres_db
    env_file:
      - ./.env
    ports:
      - "5432:5432"
    volumes:
      - ./data/postgres:/var/lib/postgresql/data/
      - ./postgres-init:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d github_meta"]
      interval: 10s
      timeout: 5s
      retries: 5
    command: postgres -c shared_preload_libraries=pg_stat_statements
    networks:
      github-trending-nw:
        ipv4_address: 10.0.1.101

  minio:
    image: minio/minio:latest
    container_name: minio_storage
    command: server /data --console-address ":9001"
    ports:
      - "9000:9000"  # API port
      - "9001:9001"  # Console UI
    env_file:
      - ./.env
    volumes:
      - ./data/minio:/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      github-trending-nw:
        ipv4_address: 10.0.1.105

  clickhouse:
    image: clickhouse/clickhouse-server:latest
    container_name: clickhouse_db
    ports:
      - "8123:8123" # HTTP interface
      - "9009:9000" # TCP port for native client
    ulimits:
      nofile:
        soft: 262144
        hard: 262144
    volumes:
      - ./data/clickhouse:/var/lib/clickhouse
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:8123/ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    env_file:
      - ./.env
    networks:
      github-trending-nw:
        ipv4_address: 10.0.1.102

  redis:
    image: redis:alpine
    container_name: redis_cache
    ports:
      - "6379:6379"
    volumes:
      - ./data/redis:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      github-trending-nw:
        ipv4_address: 10.0.1.100

  qdrant:
    image: qdrant/qdrant:latest
    container_name: qdrant_db
    ports:
      - "6333:6333"
      - "6334:6334"
    volumes:
      - ./data/qdrant:/qdrant/storage
    networks:
      github-trending-nw:
        ipv4_address: 10.0.1.104
        
  dozzle:
    image: amir20/dozzle:latest
    ports:
      - target: 8080
        published: 8888
        protocol: tcp
        mode: host
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
    # Uncomment to enable container actions (stop, start, restart). See https://dozzle.dev/guide/actions
     - DOZZLE_ENABLE_ACTIONS=true
    #
    # Uncomment to allow access to container shells. See https://dozzle.dev/guide/shell
     - DOZZLE_ENABLE_SHELL=true
    #
    # Uncomment to enable authentication. See https://dozzle.dev/guide/authentication
    # - DOZZLE_AUTH_PROVIDER=simple
    networks:
      github-trending-nw:
        ipv4_address: 10.0.1.106
    deploy:
      placement:
        constraints:
          - node.role == manager

  # --- APPLICATION SERVICES (Golang) ---

  discovery:
    build:
      context: .
      dockerfile: ./cmd/discovery/Dockerfile
    image: github-trending/discovery
    container_name: discovery
    depends_on:
      - rabbitmq
      - postgres
    restart: unless-stopped
    env_file:
      - ./.env
    networks:
      - github-trending-nw
    
  # scheduler:
  #   build:
  #     context: .
  #     dockerfile: ./cmd/scheduler/Dockerfile
  #   image: github-trending/scheduler
  #   container_name: scheduler
  #   depends_on:
  #     - rabbitmq
  #     - postgres
  #   restart: unless-stopped
  #   env_file:
  #     - ./.env

  crawler:
    build:
      context: .
      dockerfile: ./cmd/crawler/Dockerfile
    image: github-trending/crawler
    # Let's say we want to run 3 crawler instances
    deploy:
      replicas: 6
    depends_on:
      - rabbitmq
    restart: unless-stopped
    env_file:
      - ./.env
    networks:
      - github-trending-nw
      
  processor:
    build:
      context: .
      dockerfile: ./cmd/processor/Dockerfile
    image: github-trending/processor
    deploy:
      replicas: 3
    depends_on:
      - rabbitmq
      - minio
    restart: unless-stopped
    env_file:
      - ./.env
    networks:
      - github-trending-nw

  writer-service:
    build:
      context: .
      dockerfile: ./cmd/writer-service/Dockerfile
    image: github-trending/writer-service
    container_name: writer-service
    depends_on:
      - rabbitmq
      - postgres
      - clickhouse
    restart: unless-stopped
    env_file:
      - ./.env
    networks:
      - github-trending-nw

  api-server:
    build:
      context: .
      dockerfile: ./cmd/api/Dockerfile
    image: github-trending/api-server
    ports:
      - target: 8080
        published: 8080
        protocol: tcp
        mode: host
    container_name: api-server
    depends_on:
      - rabbitmq
      - postgres
      - clickhouse
      - minio
      - redis
    restart: unless-stopped
    env_file:
      - ./.env
    networks:
      github-trending-nw:
        ipv4_address: 10.0.1.103
    deploy:
      placement:
        constraints:
          - node.role == manager

  embedding-service:
    build:
      context: .
      dockerfile: ./cmd/embedding-service/Dockerfile
    image: github-trending/embedding-service
    container_name: embedding_service
    depends_on:
      - rabbitmq
      - postgres
      - minio
      - qdrant
    restart: unless-stopped
    env_file:
      - ./.env
    networks:
      - github-trending-nw

  markup-service:
    build:
      context: ./cmd/markup-service
    image: github-trending/markup-service
    container_name: markup-service
    restart: unless-stopped
    networks:
      - github-trending-nw

  embedding-api-service:
    build:
      context: .
      dockerfile: ./cmd/embedding-autoscaler/Dockerfile
    image: github-trending/embedding-autoscaler
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    restart: unless-stopped
    env_file:
      - ./.env
    networks:
      - github-trending-nw

  embedding-api-instance:
    build:
      context: ./cmd/embedding-api-service
    image: github-trending/embedding-api-service
    restart: unless-stopped
    deploy:
      replicas: 0 # Start with 0 replicas
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - github-trending-nw

  similarity-engine-service:
    build:
      context: .
      dockerfile: ./cmd/similarity-engine-service/Dockerfile
    image: github-trending/similarity-engine-service
    container_name: similarity_engine_service
    depends_on:
      - postgres
      - qdrant
      - redis
    restart: unless-stopped
    env_file:
      - ./.env
    networks:
      - github-trending-nw

  social-poster:
    build:
      context: .
      dockerfile: ./cmd/social-poster/Dockerfile
    image: github-trending/social-poster
    container_name: social-poster
    depends_on:
      - postgres
      - clickhouse
    restart: unless-stopped
    env_file:
      - ./.env
    networks:
      - github-trending-nw

volumes:
  rabbitmq_data:
  postgres_data:
  minio_data:
  clickhouse_data:
  redis_data:
  qdrant_data:

networks:
  github-trending-nw:
    driver: overlay
    ipam:
      config:
        - subnet: 10.0.1.0/24