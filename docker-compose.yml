# github-trending/docker-compose.yml

services:
  # --- INFRASTRUCTURE ---

  rabbitmq:
    image: rabbitmq:management-alpine
    container_name: rabbitmq
    ports:
      - "5672:5672"    # AMQP port for services
      - "15672:15672"  # Management UI
    volumes:
      - ./data/rabbitmq:/var/lib/rabbitmq/
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    env_file:
      - ./.env

  postgres:
    image: postgres:17.5-alpine
    container_name: postgres_db
    env_file:
      - ./.env
    ports:
      - "5432:5432"
    volumes:
      - ./data/postgres:/var/lib/postgresql/data/
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d github_meta"]
      interval: 10s
      timeout: 5s
      retries: 5

  minio:
    image: minio/minio:latest
    container_name: minio_storage
    command: server /data --console-address ":9001"
    ports:
      - "9000:9000"  # API port
      - "9001:9001"  # Console UI
    env_file:
      - ./.env
    volumes:
      - ./data/minio:/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 10s
      timeout: 5s
      retries: 5

  clickhouse:
    image: clickhouse/clickhouse-server:latest
    container_name: clickhouse_db
    ports:
      - "8123:8123" # HTTP interface
      - "9009:9000" # TCP port for native client
    ulimits:
      nofile:
        soft: 262144
        hard: 262144
    volumes:
      - ./data/clickhouse:/var/lib/clickhouse
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:8123/ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    env_file:
      - ./.env

  redis:
    image: redis:alpine
    container_name: redis_cache
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  etcd:
    image: quay.io/coreos/etcd:v3.5.12
    container_name: etcd
    command:
      - etcd
      - --name
      - etcd-0
      - --data-dir
      - /etcd-data
      - --listen-client-urls
      - http://0.0.0.0:2379
      - --advertise-client-urls
      - http://etcd:2379
      - --listen-peer-urls
      - http://0.0.0.0:2380
      - --initial-advertise-peer-urls
      - http://etcd:2380
      - --initial-cluster-token
      - etcd-cluster-1
      - --initial-cluster
      - etcd-0=http://etcd:2380
      - --initial-cluster-state
      - new
    ports:
      - "2379:2379" # Client port
      - "2380:2380" # Peer port
    volumes:
      - etcd_data:/etcd-data # Persist data
    healthcheck:
      test: ["CMD", "etcdctl", "get", "/health"]
      interval: 10s
      timeout: 5s
      retries: 5

  milvus:
    image: milvusdb/milvus:v2.2.13
    platform: linux/amd64
    container_name: milvus_db
    ports:
      - "19530:19530"
    volumes:
      - milvus_data:/milvus/data
    depends_on:
      etcd: { condition: service_healthy }
      minio: { condition: service_healthy }
    command: "/tini -- milvus run standalone"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9091/healthz"]
      interval: 30s
      timeout: 20s
      retries: 3
      start_period: 90s

  # --- APPLICATION SERVICES (Golang) ---

  discovery:
    build:
      context: .
      dockerfile: ./cmd/discovery/Dockerfile
    container_name: discovery
    depends_on:
      rabbitmq: { condition: service_healthy }
      postgres: { condition: service_healthy }
    restart: unless-stopped
    env_file:
      - ./.env
    
  scheduler:
    build:
      context: .
      dockerfile: ./cmd/scheduler/Dockerfile
    container_name: scheduler
    depends_on:
      rabbitmq: { condition: service_healthy }
      postgres: { condition: service_healthy }
    restart: unless-stopped
    env_file:
      - ./.env

  crawler:
    build:
      context: .
      dockerfile: ./cmd/crawler/Dockerfile
    # Let's say we want to run 3 crawler instances
    deploy:
      replicas: 3
    depends_on:
      rabbitmq: { condition: service_healthy }
    restart: unless-stopped
    env_file:
      - ./.env
      
  processor:
    build:
      context: .
      dockerfile: ./cmd/processor/Dockerfile
    container_name: processor
    depends_on:
      rabbitmq: { condition: service_healthy }
      postgres: { condition: service_healthy }
    restart: unless-stopped
    env_file:
      - ./.env

  api-server:
    build:
      context: .
      dockerfile: ./cmd/api/Dockerfile
    container_name: api-server
    ports:
      - "8080:8080"
    depends_on:
      rabbitmq: { condition: service_healthy }
      postgres: { condition: service_healthy }
      clickhouse: { condition: service_healthy }
      minio: { condition: service_healthy }
      redis: { condition: service_healthy }
    restart: unless-stopped
    env_file:
      - ./.env

  embedding-service:
    build:
      context: .
      dockerfile: ./cmd/embedding-service/Dockerfile
    container_name: embedding_service
    depends_on:
      rabbitmq: { condition: service_healthy }
      postgres: { condition: service_healthy }
      minio: { condition: service_healthy }
      milvus: { condition: service_healthy }
    restart: unless-stopped
    env_file:
      - ./.env

  similarity-engine-service:
    build:
      context: .
      dockerfile: ./cmd/similarity-engine-service/Dockerfile
    container_name: similarity_engine_service
    depends_on:
      postgres: { condition: service_healthy }
      milvus: { condition: service_healthy }
      redis: { condition: service_healthy }
    restart: unless-stopped
    env_file:
      - ./.env

volumes:
  rabbitmq_data:
  postgres_data:
  minio_data:
  clickhouse_data:
  redis_data:
  milvus_data:
  etcd_data:
