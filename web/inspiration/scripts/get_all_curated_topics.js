// Purpose: Fetch curated topics from GitHub API and generate TypeScript file
// Context: Used to maintain a list of available topics for the application

async function fetchCuratedTopics() {
  try {
    const allTopics = [];
    let page = 1;
    let hasMorePages = true;

    while (hasMorePages) {
      const params = new URLSearchParams({
        per_page: '100',
        page: page.toString(),
        q: 'is:curated is:featured repositories:>500'
      });

      const url = `https://api.github.com/search/topics?${params.toString()}`;
      console.log(`Fetching page ${page}...`);

      const response = await fetch(url, {
        headers: {
          'Accept': 'application/vnd.github.v3+json',
          'User-Agent': 'GitTok-Topic-Fetcher'
        }
      });

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      const data = await response.json();

      // Add just the topic names from this page
      const topicNames = data.items
        .filter(topic => topic.curated)
        .map(topic => topic.name);

      allTopics.push(...topicNames);

      // Check if we've reached the last page
      hasMorePages = data.items.length === 100 && page < Math.ceil(data.total_count / 100);
      page++;

      // GitHub API has rate limiting, so let's add a small delay
      await Bun.sleep(1000);
    }

    // Generate TypeScript content
    const tsContent = `// Generated by scripts/get_all_curated_topics.js
// Last updated: ${new Date().toISOString()}
// Total topics: ${allTopics.length}

export const topics = ${JSON.stringify(allTopics, null, 2)};
`;

    // Write to file using Bun's API
    await Bun.write('src/lib/all_topics.ts', tsContent);
    console.log(`Successfully wrote ${allTopics.length} topics to src/lib/all_topics.ts`);

  } catch (error) {
    console.error('Error fetching or processing topics:', error);
    process.exit(1);
  }
}

fetchCuratedTopics();
